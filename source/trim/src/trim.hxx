/////////////////////////////////////////////////////////////////////////////
//  trim.hxx
//
//  define the actual TRIM machine.
//
//  Written by Lutz H. Hamel.
//  (c) copyright 1994.
/////////////////////////////////////////////////////////////////////////////

#ifndef TRIM_HXX
#define TRIM_HXX

#include "const.hxx"
#include "config.hxx"
#include "basics.hxx"

/////////////////////////////////////////////////////////////////////////////

inline 
StateReg InterpretMode (TrimMode m)
{
	switch(m)
	{
	case NORMAL:	
		return Normal;

	case MATCHED:	
		return Matched;

	case REDUCED:	
		return Reduced;

	case FAILURE:	
		return Failure;

	case DONE:
	case NFORM:
		fprintf(stderr, "fatal -- mode (%d) cannot be interpreted.\n",
			 (int) m);
		abort();
		return (StateReg) 0;		
		
	default:
		fprintf(stderr, "fatal -- (%d) no such TRIM mode.\n", (int) m);
		abort();
		return (StateReg) 0;		
	}
}

/////////////////////////////////////////////////////////////////////////////

class Trim
{
	StateStack *	state_stack;
	long		no_reduct;

private:

	// Trim machine instruction set -- these will appear in the
	// Program() function generated by the assembler.
	//
	// *NOTE* the following instructions do not appear in the set
	// 	  since they are generated directly by the assembler:
	//
	//	jumpt
	//	jumpf
	//	jump
	//	call
	//	return

	void link ();

	void apply ();

	void load ();

	void restore ();

	void saveop ();

	void killop ();

	void pushframe();

	void popframe();

	void match (String op, long ar);

	void bind (String x, String sn);

	void get (String x);

	void build (String op, String ty, long ar);

	void set (TrimMode m);

	void is (TrimMode m);

	void peek (String op, String ty, long ar);

private:
	// initialization functions.

	void InitSortOrder (void);

	void InitOpTable (void);

	void InitStrings (void);



	// the actual program to be executed by the machine.

	void Program (void);

public:

	Trim ();

	long GetNoReduct (void)
		{ return no_reduct; }

	StateStack * GetStateStack (void)
		{ return state_stack; }

	State * GetState (void)
		{ return state_stack->Top(); }

	void Run (void);

	~ Trim ()
		{;}
};

/////////////////////////////////////////////////////////////////////////////

inline
Trim::Trim ()
{
	state_stack = mem(new StateStack(STATE_STACK_DEPTH));
	state_stack->Push(mem(new State));

	no_reduct = 0;

	InitSortOrder();
	InitOpTable();
	InitStrings();
}

/////////////////////////////////////////////////////////////////////////////

#ifdef INSTR_INLINE
#include "trim_instr.imp"
#endif

/////////////////////////////////////////////////////////////////////////////
#endif /* TRIM_HXX */


