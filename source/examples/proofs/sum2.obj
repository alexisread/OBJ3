obj NAT is
  sort Nat .
  op 0 : -> Nat .
  op s_ : Nat -> Nat [prec 1] .
  op _+_ : Nat Nat -> Nat [assoc comm prec 3] .
  vars M N : Nat .
  eq M + 0 = M .
  eq M + s N = s(M + N).
  op _*_ : Nat Nat -> Nat [prec 2] .
  eq M * 0 = 0 .
  eq M * s N = M * N + M .
endo

open .
vars-of NAT .
ops m n : -> Nat .

*** first show two lemmas, 0*n=0 and (sm)*n=(m*n)+n
*** base for first lemma
reduce 0 * 0 == 0 .
*** induction step for first lemma
eq 0 * n = 0 .
reduce 0 * s n == 0 .
*** thus we can assert
eq 0 * N = 0 .

*** base for second lemma
reduce (s n)* 0 == (n * 0) + 0 .
*** induction step for second lemma
eq (s m) * n = (m * n)+ n .
reduce (s m)*(s n) == (m * s n)+ s n .
*** thus
eq (s M)* N = (M * N)+ N .

*** now define
op sum : Nat -> Nat .
eq sum(0) = 0 .
eq sum(s N) = (s N)+ sum(N) .

*** show sum(n)+sum(n)=n*sn
*** base case
reduce sum(0) + sum(0) == 0 * s 0 .
*** induction step
eq sum(n) + sum(n) = n * s n .
reduce sum(s n) + sum(s n) == (s n)*(s s n) .
close
