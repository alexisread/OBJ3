th GROUPLA is
  sort Elt .
  op _*_ : Elt Elt -> Elt [assoc] .
  op e : -> Elt .
  op _-1 : Elt -> Elt [prec 2] .
  var A : Elt .
  [lid]  eq e * A = A .
  [linv] eq A -1 * A = e .
endth

open .
op a : -> Elt .

*** first, prove the right inverse law:
start a * a -1 .
apply -.lid at that .
  ***> should be: e * a * a -1
apply -.linv with A = (a -1) within that .
  ***> should be: a -1 -1 * a -1 * a * a -1
apply .linv at [2 .. 3] of that .
  ***> should be: a -1 -1 * e * a -1
apply reduction at that .
  ***> should be: e

*** add the proven equation:
 [rinv] eq A * A -1 = e .

*** second prove the right identity law:
start a * e .
apply -.linv with A = a within that .
  ***> should be: a * a -1 * a
apply .rinv at [1 .. 2] .
  ***> should be: e * a
apply reduction at that .
  ***> should be: a

*** add the proven equation:
 [rid] eq A * e = A .
close
