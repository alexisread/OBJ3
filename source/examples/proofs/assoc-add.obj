obj NAT is
  sort Nat .
  op 0 : -> Nat .
  op s_ : Nat -> Nat [prec 1] .
  op _+_ : Nat Nat -> Nat [prec 3] .
  vars M N : Nat .
  eq M + 0 = M .
  eq M + s N = s(M + N) .
endo

obj VARS is
  extending NAT .
  ops l m n : -> Nat .
endo

***> base case, n=0: l+(m+0)=(l+m)+0
reduce l + (m + 0) == (l + m) + 0 .

***> induction step
obj STEP is
  using VARS .
  eq l + (m + n) = (l + m) + n .
endo
reduce l + (m + s n) == (l + m) + s n .

*** thus we can assert
obj ASSOC is
  protecting NAT .
  vars L M N : Nat .
  eq L + (M + N) = (L + M) + N .
endo
