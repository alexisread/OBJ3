obj BSET[X :: TRIV] is
  pr IDENTICAL .
  sort Set .
  ops ({}) omega : -> Set .
  op {_} : Elt -> Set .
  op _+_ : Set Set -> Set [assoc comm id: ({})] .         *** exclusive or
  op _&_ : Set Set -> Set [assoc comm idem id: omega] .  *** intersection
  vars S S' S'' : Set .   vars E E' : Elt .
  eq S + S = {} .
  cq { E } & { E' } = {} if E =/= E' .
  eq S & {} = {} .
  cq S & (S' + S'') = (S & S') + (S & S'')
      if (S' =/== {}) and (S'' =/== {}) .
    *** made conditional to avoid non-termination from identity completion!
endo

obj SET[X :: TRIV] is
  protecting BSET[X] .
  protecting INT .
  op _U_ : Set Set -> Set [assoc comm id: ({})] .
  op _-_ : Set Set -> Set .
  op #_ : Set -> Int [prec 0] .
  op _in_ : Elt Set -> Bool .
  op _in_ : Set Set -> Bool .
  op empty?_ : Set -> Bool .
  var X : Elt .   vars S S' S'' : Set .
  eq S U S' = (S & S')+ S + S' .
  eq S - S' = S + (S & S') .
  eq empty? S = S == {} .
  eq X in S = { X } & S =/= {} .
  eq S in S' = S U S' == S' .
  eq # {} = 0 .
  cq #({ X } + S) = # S if X in S .
  cq #({ X } + S) = 1 + # S if not X in S .
endo
